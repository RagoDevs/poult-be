// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chicken.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteChicken = `-- name: DeleteChicken :exec
DELETE FROM chicken WHERE type = $1
`

func (q *Queries) DeleteChicken(ctx context.Context, type_ ChickenType) error {
	_, err := q.db.ExecContext(ctx, deleteChicken, type_)
	return err
}

const getChicken = `-- name: GetChicken :one
SELECT id, type, quantity, updated_at FROM chicken WHERE type = $1
`

func (q *Queries) GetChicken(ctx context.Context, type_ ChickenType) (Chicken, error) {
	row := q.db.QueryRowContext(ctx, getChicken, type_)
	var i Chicken
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Quantity,
		&i.UpdatedAt,
	)
	return i, err
}

const getChickens = `-- name: GetChickens :many
SELECT id, type, quantity, updated_at FROM chicken
`

func (q *Queries) GetChickens(ctx context.Context) ([]Chicken, error) {
	rows, err := q.db.QueryContext(ctx, getChickens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chicken{}
	for rows.Next() {
		var i Chicken
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Quantity,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChicken = `-- name: InsertChicken :exec
INSERT INTO chicken (type, quantity) VALUES ($1, $2)
`

type InsertChickenParams struct {
	Type     ChickenType `json:"type"`
	Quantity int32       `json:"quantity"`
}

func (q *Queries) InsertChicken(ctx context.Context, arg InsertChickenParams) error {
	_, err := q.db.ExecContext(ctx, insertChicken, arg.Type, arg.Quantity)
	return err
}

const updateChickenById = `-- name: UpdateChickenById :exec
UPDATE chicken SET quantity = $2 WHERE id = $1
`

type UpdateChickenByIdParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) UpdateChickenById(ctx context.Context, arg UpdateChickenByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateChickenById, arg.ID, arg.Quantity)
	return err
}
