// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ChickenType string

const (
	ChickenTypeHen    ChickenType = "hen"
	ChickenTypeCock   ChickenType = "cock"
	ChickenTypeChicks ChickenType = "chicks"
)

func (e *ChickenType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChickenType(s)
	case string:
		*e = ChickenType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChickenType: %T", src)
	}
	return nil
}

type NullChickenType struct {
	ChickenType ChickenType `json:"chicken_type"`
	Valid       bool        `json:"valid"` // Valid is true if ChickenType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChickenType) Scan(value interface{}) error {
	if value == nil {
		ns.ChickenType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChickenType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChickenType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChickenType), nil
}

type ReasonType string

const (
	ReasonTypePurchase ReasonType = "purchase"
	ReasonTypeSale     ReasonType = "sale"
	ReasonTypeBirth    ReasonType = "birth"
	ReasonTypeDeath    ReasonType = "death"
	ReasonTypeGift     ReasonType = "gift"
	ReasonTypeOther    ReasonType = "other"
)

func (e *ReasonType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReasonType(s)
	case string:
		*e = ReasonType(s)
	default:
		return fmt.Errorf("unsupported scan type for ReasonType: %T", src)
	}
	return nil
}

type NullReasonType struct {
	ReasonType ReasonType `json:"reason_type"`
	Valid      bool       `json:"valid"` // Valid is true if ReasonType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReasonType) Scan(value interface{}) error {
	if value == nil {
		ns.ReasonType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReasonType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReasonType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReasonType), nil
}

type TransactionType string

const (
	TransactionTypeExpense TransactionType = "expense"
	TransactionTypeIncome  TransactionType = "income"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type Category struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
}

type Chicken struct {
	ID        uuid.UUID   `json:"id"`
	Type      ChickenType `json:"type"`
	Quantity  int32       `json:"quantity"`
	UpdatedAt time.Time   `json:"updated_at"`
}

type ChickenHistory struct {
	ID             uuid.UUID   `json:"id"`
	ChickenType    ChickenType `json:"chicken_type"`
	QuantityChange int32       `json:"quantity_change"`
	Reason         ReasonType  `json:"reason"`
	CreatedAt      time.Time   `json:"created_at"`
}

type Token struct {
	Hash   []byte    `json:"hash"`
	UserID uuid.UUID `json:"user_id"`
	Expiry time.Time `json:"expiry"`
	Scope  string    `json:"scope"`
}

type Transaction struct {
	ID          uuid.UUID       `json:"id"`
	Type        TransactionType `json:"type"`
	CategoryID  uuid.UUID       `json:"category_id"`
	Amount      int32           `json:"amount"`
	Date        time.Time       `json:"date"`
	Description string          `json:"description"`
	CreatedAt   time.Time       `json:"created_at"`
}

type User struct {
	ID           uuid.UUID `json:"id"`
	CreatedAt    time.Time `json:"created_at"`
	Name         string    `json:"name"`
	Email        string    `json:"email"`
	PasswordHash []byte    `json:"password_hash"`
	Activated    bool      `json:"activated"`
}
