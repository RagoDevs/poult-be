// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chicken_history.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteChickenHistory = `-- name: DeleteChickenHistory :exec
DELETE FROM chicken_history WHERE id = $1
`

func (q *Queries) DeleteChickenHistory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChickenHistory, id)
	return err
}

const getChickenHistories = `-- name: GetChickenHistories :many
SELECT id, chicken_type, quantity_change, reason, created_at FROM chicken_history
`

func (q *Queries) GetChickenHistories(ctx context.Context) ([]ChickenHistory, error) {
	rows, err := q.db.QueryContext(ctx, getChickenHistories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChickenHistory{}
	for rows.Next() {
		var i ChickenHistory
		if err := rows.Scan(
			&i.ID,
			&i.ChickenType,
			&i.QuantityChange,
			&i.Reason,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChickenHistory = `-- name: GetChickenHistory :one
SELECT id, chicken_type, quantity_change, reason, created_at FROM chicken_history WHERE id = $1
`

func (q *Queries) GetChickenHistory(ctx context.Context, id uuid.UUID) (ChickenHistory, error) {
	row := q.db.QueryRowContext(ctx, getChickenHistory, id)
	var i ChickenHistory
	err := row.Scan(
		&i.ID,
		&i.ChickenType,
		&i.QuantityChange,
		&i.Reason,
		&i.CreatedAt,
	)
	return i, err
}

const insertChickenHistory = `-- name: InsertChickenHistory :exec
INSERT INTO chicken_history (chicken_type, quantity_change, reason) VALUES ($1, $2, $3)
`

type InsertChickenHistoryParams struct {
	ChickenType    ChickenType `json:"chicken_type"`
	QuantityChange int32       `json:"quantity_change"`
	Reason         ReasonType  `json:"reason"`
}

func (q *Queries) InsertChickenHistory(ctx context.Context, arg InsertChickenHistoryParams) error {
	_, err := q.db.ExecContext(ctx, insertChickenHistory, arg.ChickenType, arg.QuantityChange, arg.Reason)
	return err
}

const updateChickenHistory = `-- name: UpdateChickenHistory :exec
UPDATE chicken_history SET chicken_type = $2, quantity_change = $3, reason = $4 WHERE id = $1
`

type UpdateChickenHistoryParams struct {
	ID             uuid.UUID   `json:"id"`
	ChickenType    ChickenType `json:"chicken_type"`
	QuantityChange int32       `json:"quantity_change"`
	Reason         ReasonType  `json:"reason"`
}

func (q *Queries) UpdateChickenHistory(ctx context.Context, arg UpdateChickenHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateChickenHistory,
		arg.ID,
		arg.ChickenType,
		arg.QuantityChange,
		arg.Reason,
	)
	return err
}
